2020-05-13(수) [ p.28 ]---------------------------------------------------------------------------------------------------  

8장 : TABLE 위주 학습
9장 : VIEW / Sequence / Index / Synonym 학습

|||||||| 데이터 정의어 (DDL) - TABLE
[D]
※ 1장~7장까지는 만들어둔 테이블을 활용, 8장부터는 직접 테이블을 생성,수정,삭제하면서 작업할 것 
______________________________________________________________________________

■ 테이블생성   " CREATE TABLE "
  - create table 권한을 가진사람이 만들 수 있음.
  - 테이블명, 컬럼명, 데이터타입, 컬럼사이즈 ◀- 기본 정보(논리모델링 과정에서 모두 도출되었다는 전제하에 테이블생성)
  - 테이블명, 컬럼명 :  30byte 넘기지x, 문자로 시작해야 함(특수문자는 _ # $ 만 허용)
  ▶ 데이터타입------------------------------------------------------------------------------------------------------------------
     1. 문자형 | 
 [권장]  ☞ 	- VARCHAR2(10) : 가변길이 10 byte 저장 
	   ==> 3자 입력시 3자 저장, 자투리 공간X=공간효율▲, 성능은 ▼
  	- CHAR2(10) : 고정길이 10 byte 저장
	   ==> 3자 입력시 10자 저장, 성능▲,공간효율▼
	
     2. 날짜형 |  DATE : 사이즈 없음

     3. 숫자형 |  NUMBER(10) : 숫자 10자 저장가능
	      NUMBER(P,S) : P는 전체자릿수(소수점이하 자리 포함), S는 소수점 이하 자릿수 
		※(2,2)의 경우는 0.99까지 나올 수 있다는 의미(실제 조회시 0은 출력되지X)
  ▶ Default값 설정 |  4번 컬럼명 입력시 : create_date DATE DEFAULT '01-JAN-07'(또는 SYSDATE)
		 ※ 만일 INSERT시 4번 컬럼명을 생략하면 default 설정한 값이 입력되도록 함.
		      ★ 디폴트값이 설정되어있지 않으면 null이, 설정되어 있으면 디폴트값이 들어감.
		          명시적 방법으로는 'default'키워드를 이용할 수도 있음.
  ▶ 제약조건 설정(ex. 이름에 not null) |
        - 엉뚱한 데이터가 들어오는 것을 방지\
          (예) 주민번호 입력란에는 반드시 13자리가 입력되도록 하는 것(check 제약조건)
	 이미 가입된 주민번호가 입력되었을 때 (unique 제약조건 필요)
  
       [제약조건 선언시기]
	1. TABLE 생성 시 : CREATE TABLE [] ; ◀- 구문 안에 입력
	2. TABLE 생성 후 : ALTER    TABLE [] ; ◀- 구문 안에 입력	     
       [제약조건명 부여방법]
 	1. 사용자가 직접 지정 : 고유하고 의미있게 emp_empid_pk 형태
	2. 생략하는 방법 : Oracle이 자동으로 부여한 이름 설정
		          (예 : sys_c992093 ) ◀- 알아보기 힘들어서 관리하기 힘들다.

       __________________________________________________________

	Primary key  |  Foreign key  | Unique key  |  Not null  | Check
       __________________________________________________________

       [제약조건 선언방법]
	1. 컬럼레벨  |
	    - 제약조건명 생략시에는 컬럼명 [primary key] 식으로 표현가능
		employee_id NOT NULL   / primary key(employee_id)◀- 테이블레벨
	    - NOT NULL은 반드시 컬럼레벨에서만 선언


	■ Primary key 제약조건(기본키) :  테이블당 단 한개만
	- not null + unique 특성을 동시에 가지고 있음.
 	 (null값, 중복값 둘다 허용X)

	■ Foreign key 제약조건 :  pk, uk설정된 컬럼 참조
	 ※ pk나 uk선언되어있지 않은 컬럼을 참조시에는 에러 발생
	- null값 허용( 아직 결정이 안 된 것을 보아)
	- 자기 자신 테이블 or 다른 테이블의 특정 컬럼을 참조하는 제약조건
	- 참조되는 컬럼(부모컬럼), 참조하는 테이블(자식컬럼)
	- 테이블과 테이블의 관계를 형성할 수 있게 하는 key 이다.
	- 사수컬럼은 부모컬럼인 사번컬럼을 참조하고 이때 널값이 포함될 수 있고 중복값이
	  있을 수 있다. 

	※ FK-column level 문법에 컬럼레벨로 선언시
	constraint emp_deptid_fk (제약조건은 쓰지않는다. 뒤에 레퍼런스가 같이 오므로)
	references departments(department_id)

	※ FK-column level 문법에 테이블 레벨로 선언시
	컬럼레벨과 달리 제약조건을 생략해서는 안된다. 제약조건 뒤에 컬럼명이 와야하기 때문
	constraint [제약조건명] foreign key (컬럼명) references 테이블명(부모 컬럼)

	■ Check key 제약조건
	- 아주 광범위하게 사용 가능
	- 해당 컬럼이 만족해야하는 조건을 사용자가 자유자재로 지정할 수 있음.
	- 조건 구성 : 좌변 <= 우변           ---> 의 비교연산자 형태.
                  ※ 이때 반드시 컬럼명(좌변)도 함께 표기해줘야 한다.
	- 컬럼레벨과 테이블문법의 차이가 없음.(다른 제약조건은 컬럼명 표기여부등이 차이)
	|월급| constraint [제약조건명] check ( (컬럼명) > 0 ) ◀- check뒤 컬럼이 만족해야 할 조건이 들어감.
	|성별| constraint [제약조건명] check( 성별 IN ('남', '여') )
	|주번| constraint [제약조건명] check( length(주민번호컬럼) = 13)

■ 데이터 딕셔너리(Data Dictionary) 사용법
  ▶ 제약조건 정보를 확인하기
  1. [구조 먼저 확인] desc user_constraints 
     ※ 테이블이 너무 많아서 함부로 * 사용하지 않기
  2. [SELECT] 
	SELECT  constraint_name, constraint_type, search_conditon, r_constraint_name,
					    (보완)		 (참조하는 부모컬럼의 이름)
	FROM	user_constraints 
	WHERE   LOWER(table_name) = LOWER('&t_name');
	★★★★★ 따로 쿼리구문을 저장하도록 하자.(자주사용함)
 	 저장하기 : save /home/oracle/search_cons.sql
	 불러오기 : @/home/oracle/search_cons.sql

     	※ WHERE절에 테이블명(table_name)은 대소문자를 구분하며, 대부분 대문자 이므로 대문자 형태로 조건준다.
     	※ CHECK 와 NOT NULL 모두 C 로 뜨기 때문에 search_condition으로 보완하면 check와 notnull 구분가능.

	[SQL 디벨로퍼 자주쓰는 쿼리 저장하는 방법]
	일부구간만 블록선택해서 SQL블록시트 아이콘 클릭-> 해당 구문만 있는 시트를 
	따로 만들어서 저장해야 함.
